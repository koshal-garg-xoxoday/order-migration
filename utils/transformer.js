/**
 * Transform MS SQL order data to MySQL compatible format
 * @param {Object} msOrder - Order data from MS SQL
 * @param {Array} vouchers - Voucher data from MS SQL
 * @returns {Object} - Transformed data for MySQL
 */
function transformOrderData(msOrder, vouchers = []) {
  // Map order status from MS SQL to MySQL order_status_id
  const orderStatusMap = {
    'InProcess': 1,
    'Placed': 2,
    'Completed': 5,
    'Cancelled': 7,
    'Refunded': 11
  };
  
  // Basic order information
  const orderData = {
    order_id: msOrder.id.toString(),
    invoice_no: `INV-${new Date().getFullYear()}-${msOrder.ordernumber}`,
    invoice_prefix: '',
    invoice_path: '',
    store_id: msOrder.storeid || '',
    store_name: 'Store',
    store_url: 'https://s100.xoxoday.com/',
    customer_id: msOrder.customerid || '',
    new_customer_id: msOrder.customerid || '',
    customer_group_id: 1,
    firstname: msOrder.customername ? msOrder.customername.split(' ')[0] : '',
    lastname: msOrder.customername ? msOrder.customername.split(' ').slice(1).join(' ') : '',
    email: '', // Extract from address if available
    telephone: '', // Extract from address if available
    fax: '',
    payment_firstname: '',
    payment_lastname: '',
    payment_company: '',
    payment_company_id: '',
    payment_tax_id: '',
    payment_address_1: '',
    payment_address_2: '',
    payment_city: '',
    payment_postcode: '',
    payment_country: '',
    payment_country_id: '',
    payment_zone: '',
    payment_zone_id: '',
    payment_address_format: '',
    payment_method: 'voucher',
    payment_code: 'payu',
    shipping_firstname: '',
    shipping_lastname: '',
    shipping_contact_no: '',
    shipping_company: '',
    shipping_address_1: '',
    shipping_address_2: '',
    shipping_city: '',
    shipping_postcode: '',
    shipping_country: '',
    shipping_country_id: '',
    shipping_zone: '',
    shipping_zone_id: '',
    shipping_address_format: '',
    shipping_method: msOrder.shipmentStatus || '',
    shipping_code: '',
    comment: '',
    total: parseFloat(msOrder.orderPrice) || 0,
    total_product_discount: 0,
    order_status_id: orderStatusMap[msOrder.Status] || 1,
    delivery_status: msOrder.shipmentStatus === 'Delivered' ? 'Delivered' : 'Pending',
    mail_delivery_status: '',
    sms_delivery_status: '',
    delivery_date: null,
    affiliate_id: 0,
    commission: 0,
    language_id: 1,
    currency_id: 5,
    currency_code: msOrder.Currency || 'USD',
    currency_value: 1.0,
    ip: '::1',
    forwarded_ip: '',
    user_agent: '',
    accept_language: '',
    date_added: msOrder.createddate || new Date(),
    date_modified: msOrder.modifieddate || new Date(),
    landline: '',
    shiping_landline: '',
    is_order_history_deleted: 0,
    order_contains: 0,
    vendor_name: '',
    client_name: '',
    client_order_id: '',
    client_order_date: null,
    po_number: '',
    po_item_reference: '',
    otp_telephone: '',
    source: 'Store',
    prefered_date: null,
    app: 0,
    client_app_id: 0,
    settled_date: null,
    api_unique_id: '',
    alert: 0,
    alert_message: '',
    user: '',
    client_id: 0,
    is_converted: 0,
    mail_server: '',
    payment_link: 0,
    payment_order: 0,
    discount_comment: '',
    charges_comment: '',
    payment_link_order_type: 0,
    client_customer_id: '',
    new_client_customer_id: '',
    client_poc_id: 0,
    payment_for: '',
    vendor_action: 0,
    lock_order: 0,
    is_migrated: 0,
    tag: '',
    plan_id: 0,
    products: [],
    vouchers: [],
    totals: []
  };
  
  // Extract contact info from address if available
  if (msOrder.address) {
    const addressObj = parseAddress(msOrder.address);
    if (addressObj) {
      orderData.email = addressObj.email || '';
      orderData.telephone = addressObj.phone || '';
      
      // Populate shipping address fields
      orderData.shipping_address_1 = addressObj.line1 || '';
      orderData.shipping_address_2 = addressObj.line2 || '';
      orderData.shipping_city = addressObj.city || '';
      orderData.shipping_postcode = addressObj.postal_code || '';
      orderData.shipping_country = addressObj.country_name || '';
      orderData.shipping_zone = addressObj.region || '';
    }
  }
  
  // Process product data
  if (msOrder.productid) {
    orderData.products.push({
      order_product_id: null, // This will be auto-generated by MySQL
      order_id: msOrder.id.toString(),
      product_id: msOrder.productid.toString(),
      name: msOrder.name || '',
      model: '',
      quantity: parseInt(msOrder.quantity, 10) || 1,
      price: parseFloat(msOrder.itemPrice) || 0,
      raw_price: parseFloat(msOrder.itemPrice) || 0,
      total: parseFloat(msOrder.itemPrice) * (parseInt(msOrder.quantity, 10) || 1),
      tax: 0,
      vendor_gst_percent: 0,
      reward: 0,
      receiver_mobile_number: '',
      receiver_mobile_code: '',
      order_product_status: orderData.order_status_id,
      order_product_delivery_date: null,
      courier_tracking_id: '',
      other_courier_company: '',
      delivery_status: orderData.delivery_status,
      courier_company: '',
      egift_voucher_theme_id: 0,
      customize_voucher: 0,
      physical_voucher_sl_no: '',
      alternative_email: '',
      cancel_reason: '',
      cancel_user_id: 0,
      product_discount: 0,
      total_after_discount: parseFloat(msOrder.itemPrice) * (parseInt(msOrder.quantity, 10) || 1),
      review_cancel: 0,
      frogo_user_type_id: 0,
      prefered_date: null,
      category_id: 0,
      changes_message: '',
      city_id: 0,
      address: '',
      address_id: 0,
      package_id: 0,
      package_info: '{}',
      orderImage: '',
      loyalty_name: '',
      loyalty_conversion: 1.0,
      loyalty_denomination: 0,
      reference_key: 'sessionId',
      reference_value: '',
      details: '',
      currency_code: msOrder.itemCurrency || msOrder.Currency || 'USD',
      image_url: msOrder.ImageUrl || null
    });
  }
  
  // Process voucher data
  if (vouchers && vouchers.length > 0) {
    for (const voucher of vouchers) {
      orderData.vouchers.push({
        egift_voucher_detail_id: null, // Auto-generated by MySQL
        order_id: msOrder.id.toString(),
        voucher_code: voucher.voucherCode || '',
        pin: voucher.pin || '',
        amount: parseFloat(voucher.amount) || 0,
        validity_date: voucher.validity || new Date(),
        product_id: voucher.productId ? voucher.productId.toString() : '',
        status: 0,
        salt: '',
        date_added: new Date(),
        date_modified: new Date(),
        transfer_voucher_request_id: 0,
        special_case_id: 0
      });
    }
  }

  // Add order totals
  orderData.totals = [{
    order_total_id: null, // Auto-generated by MySQL
    order_id: msOrder.id.toString(),
    code: 'sub_total',
    title: 'Sub-Total',
    text: `$ ${parseFloat(msOrder.orderPrice).toFixed(0)}`,
    value: parseFloat(msOrder.orderPrice) || 0,
    sort_order: 0,
    type: ''
  }, {
    order_total_id: null, // Auto-generated by MySQL
    order_id: msOrder.id.toString(),
    code: 'total',
    title: 'Total',
    text: `$ ${parseFloat(msOrder.orderPrice).toFixed(0)}`,
    value: parseFloat(msOrder.orderPrice) || 0,
    sort_order: 1,
    type: ''
  }];
  
  // Extract payment information if available
  if (msOrder.PaymentOuterIds) {
    const payments = parsePaymentInfo(msOrder.PaymentOuterIds);
    if (payments.length > 0) {
      orderData.payment_method = payments[0].status || 'voucher';
      orderData.payment_code = payments[0].outer_id || 'payu';
    }
  }
  
  return orderData;
}

/**
 * Parse address string from MS SQL format to structured object
 * @param {string} addressString - Address string from MS SQL
 * @returns {Object} - Structured address object
 */
function parseAddress(addressString) {
  if (!addressString) return null;
  
  // Example format: "ShippingAddress : 123 Main St  City CA Region 12345 US United States"
  const addressParts = addressString.split(' : ');
  if (addressParts.length < 2) return null;
  
  const addressType = addressParts[0];
  const fullAddress = addressParts[1];
  
  // Very basic parsing - in real application, this would need to be more robust
  const addressFields = fullAddress.split(' ');
  
  return {
    type: addressType,
    line1: addressFields.slice(0, 2).join(' '),
    line2: addressFields.length > 2 ? addressFields[2] : '',
    city: addressFields.length > 3 ? addressFields[3] : '',
    region: addressFields.length > 4 ? addressFields[4] : '',
    postal_code: addressFields.length > 5 ? addressFields[5] : '',
    country_code: addressFields.length > 6 ? addressFields[6] : '',
    country_name: addressFields.length > 7 ? addressFields.slice(7).join(' ') : '',
    email: '',  // Would need to be extracted from other data
    phone: ''   // Would need to be extracted from other data
  };
}

/**
 * Parse payment info string to structured data
 * @param {string} paymentString - Payment string from MS SQL
 * @returns {Array} - Array of payment objects
 */
function parsePaymentInfo(paymentString) {
  if (!paymentString) return [];
  
  // Format: "outerId1;status1,outerId2;status2"
  const payments = paymentString.split(',').map(payment => {
    const [outerId, status] = payment.split(';');
    return { 
      outer_id: outerId,
      status: status
    };
  });
  
  return payments;
}

module.exports = {
  transformOrderData,
  parseAddress,
  parsePaymentInfo
};